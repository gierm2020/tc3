<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_PickAndPlace" Id="{0acadc22-7b10-494f-8323-7cb38d3e0455}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PickAndPlace EXTENDS FB_Module
(* ESTACIÓN DE CARGA - Manual de usuario #31/27 
La alimentación de material descrita en el punto anterior realiza el suministro 
de tapas que posteriormente serán montadas en el conjunto preparado en 
el palet. Sin embargo, tras esta fase resulta necesario realizar la carga de 
la tapa sobre el plato divisor. 

Para ello se ha dispuesto el manipulador de la imagen, compuesto por un cilindro 
rotolineal, encargado de realizar la elevación y posterior giro de un brazo con una pinza 
de dos dedos de apertura paralela. El giro de 180º realizado por este elemento, sitúa 
la pinza sobre el punto exacto de descarga de la tapa en la primera estación del plato 
divisor.

ESTACIÓN DE INSERCIÓN TAPA - Manual de usuario #33/29
Al igual que sucedía en la estación de inserción de eje, la última de las estaciones está encargada 
del montaje de la tapa sobre el conjunto retenido en la cinta transportadora.

Como puede observarse en la imagen, el manipulador previsto para realizar esta tarea 
presenta idénticas características que el utilizado para depositar la tapa sobre el plato divisor. 
Dispone de una pinza de apertura paralela para sujetar la tapa, que es elevada y desplazada 
realizando un giro hasta el punto de descarga mediante un actuador neumático rotolineal. *)

VAR_INPUT
	Mover:BOOL:=TRUE;
END_VAR

VAR_OUTPUT

	// Controlador
	fbController: FB_PickAndPlace_SFC:=(dr:=dr); // controlador para ejecución normal

	// Sensores
	h0 : dvSensor := (dr:=dr); //AT %I*: BOOL; (* Final de carrera horizontal retraida *)
	h1 : dvSensor := (dr:=dr); //AT %I*: BOOL; (* Final de carrera horizontal extendido *)
	v1 : dvSensor := (dr:=dr); //AT %I*: BOOL; (*Final de carrera vertical abajo*)
	v0 : dvSensor := (dr:=dr); //AT %I*: BOOL; (*Final de carrera vertical arriba*)

	// Actuadores	
	HOR : dvActuator := (dr:=dr); // AT %Q*: BOOL; (* Actuador de extension de brazo horizontal *)
	VER : dvActuator := (dr:=dr); //AT %Q*: BOOL; (* Actuador de movimiento vertical de brazo*)
	PIN : dvActuator := (dr:=dr); //AT %Q*: BOOL; (*Actuador de pinza de brazo*)
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ProcessCycle" Id="{ad50b7d3-ffb1-4d5e-9f1d-9c4b9b9b584c}">
      <Declaration><![CDATA[METHOD ProcessCycle : BOOL
VAR_INPUT
	dr			: REFERENCE TO FB_Director;
	tapas		: REFERENCE TO FB_Tapas;	
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Sensores y condiciones iniciales
h0.ProcessCycle(dr:=dr, sfcValue=>fbController.h0);
h1.ProcessCycle(dr:=dr, sfcValue=>fbController.h1);
v0.ProcessCycle(dr:=dr, sfcValue=>fbController.v0);
v1.ProcessCycle(dr:=dr, sfcValue=>fbController.v1);
IC := v0.uiValue AND h0.uiValue; // el brazo está en condiciones iniciales cuando está arriba y retraído

// Controlador
fbController.PauseAndReset(dr.gmModeActual);
fbController(Mover := Mover,
	dr:=dr, IC:=IC, Execute:=Execute, Ack:=Ack, Ready=>Ready, Done=>Done);

// Actuadores y actualización de tapas
HOR.ProcessCycle(dr:=dr, sfcValue:=fbController.HOR);
VER.ProcessCycle(dr:=dr, sfcValue:=fbController.VER);
PIN.ProcessCycle(dr:=dr, sfcValue:=fbController.PIN);
IF Name='Carga' THEN
	tapas.Cargado(Done:=Done, Mover:=Mover);
ELSE
	tapas.Descargado(Done:=Done, Mover:=Mover);
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>