<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_Alimentador" Id="{c5b5144c-73a3-412e-b858-b842aecaf92f}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Alimentador EXTENDS FB_Module
(*
MÓDULO ALIMENTACIÓN - Manual de usuario #31/27

Para el almacenamiento y posterior alimentación de las tapas, se utiliza un 
cargador de gravedad, provisto de un empujador accionado mediante cilindro 
neumático que realiza la extracción 

*)

VAR
	(* Controlador  específico *)
	fbController: FB_Alimentador_SFC;

	(* Temporizadores específicos *)
	//TK_1: TIME := T#1S;	

	(* Sensores específicos *)
	k1 AT %I*: BOOL; (* Se corresponde con empujador tapa delante c1 *)

	(* Actuadores específicos *)
	K_1 AT %Q*: BOOL; (* Se corresponde con el cTAP *)
	FM AT %Q*: BOOL;  (* Se corresponde con el zFM *)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="InitialConditions" Id="{5b94622a-e072-4bf0-b660-11c842d8fb18}">
      <Declaration><![CDATA[METHOD InitialConditions : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitialConditions := NOT k1; // el alimentador está en estado inicial si k1 está apagado]]></ST>
      </Implementation>
    </Method>
    <Method Name="ModuleControlFlow" Id="{d7358fc0-6ede-496b-926f-c7f1a8440317}">
      <Declaration><![CDATA[METHOD ModuleControlFlow : BOOL 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//----------------------------------- leer los sensores para determinar el estado del módulo


//----------------------------------- preparar los datos que necesita el controlador
//ctInp.HwIC := InitialConditions();



//----------------------------------- ejecutar el controlador
//fbModuleController(ctInp:=ctInp, ctOut=>ctOut);
fbController(
	//tm			:= tm,
	IC 			:= InitialConditions(),	
	Execute 	:= Execute,	
	Ack 		:= Ack, 
	
	//ctInp := ctInp,								// entrada estándar
	//TK_1 := TK_1,								// temporizadores específicos
    k1 := k1, 									// sensores específicos
	//											// otras entradas específicas
	//ctOut => ctOut);							// resultado del controlador
	
	Ready 		=> Ready, 
	Failure		=> Failure,
	Done 		=> Done);


//----------------------------------- utilizar los resultados del controlador

// Cambios en actuadores por el modo manual
//IF ctInp.Manual THEN
IF gm.ModeActual=E_GEMMA.F4VerificacionSinOrden THEN
	; // TODO AÑADIR AQUI EL MODO MANUAL DEL ALIMENTADOR

// Cambios en actuadores por el resultado del controlador
ELSE
	// Actualizar actuadores hardware con lo que indique el controlador
	K_1 := fbController.K_1;
END_IF

// Cambios en actuadores independientes del modo manual
FM := fbcontroller.FM; // actuador de falta de material





(* PENDIENTE BORRAR
// el alimentador está en condiciones iniciales si k1 está desactivado
ctOut.IC := NOT k1; 

// si no eestamos en modo manual, actualizar los actuadores con el estado del controlador
*)
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>