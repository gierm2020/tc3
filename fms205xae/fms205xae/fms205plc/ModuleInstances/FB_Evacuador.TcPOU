<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_Evacuador" Id="{50116491-c91a-4b60-887b-578d95c086cb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Evacuador EXTENDS FB_Module
(* 
ESTACIÓN DE EVACUACIÓN DE TAPA INCORRECTA - Manual de usuario #33/29

En caso de que la tapa que llegue a la penúltima de las estaciones del plato divisor, tras haber pasado por 
los diferentes sensores encargados de determinar su material y su altura, no coincida con lo indicado por el 
controlador central encargado de planificar la producción, ha de ser rechazada. Para ello se ha dispuesto en esta 
estación un manipulador de dos ejes que en caso de recibir la orden correspondiente, recoge la tapa del plato 
divisor y la deposita sobre una rampa de evacuación.

Los componentes que forman parte de este manipulador son dos cilindros neumáticos de vástagos paralelos a modo de ejes, 
sobre los que se ha fijado como elemento terminal una placa con tres ventosas para sujeción por vacío

*)

VAR_INPUT
	Evacuar		: BOOL; // Hay que evacuar la tapa en la posición del módulo
	//TSOL		: TIME := T#100MS; // tiempo después de soltar y antes de subir	    
END_VAR

VAR
	// Controlador
	fbController		: FB_Evacuador_SFC:=(dr:=dr); 		// controlador para ejecución normal

	// Sensores
	f0 		: dvSensor := (dr:=dr);
	f1 		: dvSensor := (dr:=dr);
	g0 		: dvSensor := (dr:=dr);
	v1 		: dvSensor := (dr:=dr);

	// Actuadores
	F_0		: dvActuator := (dr:=dr);
	F_1		: dvActuator := (dr:=dr);
	G_1		: dvActuator := (dr:=dr);
	V_1		: dvActuator := (dr:=dr);
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[
]]></ST>
    </Implementation>
    <Method Name="InitialConditions" Id="{d5288280-f06a-44bb-9fd2-f9b3ed687057}">
      <Declaration><![CDATA[METHOD InitialConditions : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[InitialConditions := f1.hwValue; // el evacuador está en condiciones iniciales cuando el sensor f1 está activado]]></ST>
      </Implementation>
    </Method>
    <Method Name="ProcessCycle" Id="{088423ab-0767-49f6-96df-c713fe6fe249}">
      <Declaration><![CDATA[METHOD ProcessCycle : BOOL 
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//----------------------------------- leer los sensores para determinar el estado del módulo


//----------------------------------- preparar los datos que necesita el controlador
fbController.SFCPause := Pausar;
fbController.SFCReset := Reset;

f0.ProcessCycle(dr:=dr, sfcValue=>fbController.f0);
f1.ProcessCycle(dr:=dr, sfcValue=>fbController.f1);
g0.ProcessCycle(dr:=dr, sfcValue=>fbController.g0);
v1.ProcessCycle(dr:=dr, sfcValue=>fbController.v1);

//ctInp.HwIC := InitialConditions();
IC := InitialConditions();

//----------------------------------- ejecutar el controlador
//fbModuleController(ctInp:=ctInp, ctOut=>ctOut);
fbController(
	Evacuar	:= Evacuar,							// otras entradas específicas
	dr:=dr, IC:=IC, Execute:=Execute, Ack:=Ack, Ready=>Ready, Done=>Done);

F_0.ProcessCycle(dr:=dr, sfcValue:=fbController.F_0);
F_1.ProcessCycle(dr:=dr, sfcValue:=fbController.F_1);
G_1.ProcessCycle(dr:=dr, sfcValue:=fbController.G_1);
V_1.ProcessCycle(dr:=dr, sfcValue:=fbController.V_1);
IsActive := F_0.uiValue OR F_1.uiValue OR G_1.uiValue OR V_1.uiValue;

]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>