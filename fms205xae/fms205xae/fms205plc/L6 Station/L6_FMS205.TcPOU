<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="L6_FMS205" Id="{a261f573-1402-443e-9bab-e88e0bf02070}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK L6_FMS205 // EXTENDS L1_ModuleBase;

VAR_INPUT
	fbPanel					: L5_Panel := (dr := dr);	
END_VAR

VAR
	// Director, panel y tapas
	dr						: L1_Director;
	tapas					: L6_Tapas;
	
	// módulos de la FMS205
	mdAlimentador			: L3_Alimentador			:= (dr:=dr, ID := 1, Name := 'Alimentador');
	mdPickAndPlaceCarga 	: L3_PickAndPlace			:= (dr:=dr, ID := 2, Name := 'Carga');
	mdMedidorTapa			: L3_MedidorTapa			:= (dr:=dr, ID := 3, Name := 'Medidor');
	mdCaptadorInductivo 	: L3_CaptadorInductivo		:= (dr:=dr, ID := 4, Name := 'Inductivo');
	mdDetectorFotoelectrico : L3_DetectorFotoelectrico	:= (dr:=dr, ID := 5, Name := 'Fotoeléctrico');
	mdEvacuador			 	: L3_Evacuador				:= (dr:=dr, ID := 6, Name := 'Evacuador');
	mdPickAndPlaceDescarga 	: L3_PickAndPlace			:= (dr:=dr, ID := 7, Name := 'Descarga');
	mdPlatoDivisor			: L3_PlatoDivisor			:= (dr:=dr, ID := 8, Name := 'Plato');
	mdCinta					: L3_Cinta					:= (dr:=dr, ID := 9, Name := 'Cinta');
	
	// controladores a nivel estación
	ctrlF1Producir			: L4_FMS205_F1Producir_SFC; 
	ctrlF2SeqPrep			: L4_FMS205_F2SeqPrep_SFC;		
	ctrlF3SeqFin			: L4_FMS205_F3SeqFin_SFC;		
	ctrlF6Prueba			: L4_FMS205_F6Prueba_SFC;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="InitialConditions" Id="{6c17034c-aab7-41fb-b0b6-e85a6db67498}">
      <Declaration><![CDATA[METHOD InitialConditions : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* La estación está en condiciones iniciales si cada módulo lo está *)
InitialConditions := (
		mdAlimentador.IC AND
		mdPickAndPlaceCarga.IC AND
		mdMedidorTapa.IC AND 
		mdCaptadorInductivo.IC AND
		mdDetectorFotoelectrico.IC AND
		mdEvacuador.IC AND
		mdPickAndPlaceDescarga.IC AND
		mdPlatoDivisor.IC AND
		mdCinta.IC )  OR dr.gmLocalHost;
	 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsFailied" Id="{c00d0657-d8cd-4b4b-a9ee-6be440092cb6}">
      <Declaration><![CDATA[METHOD IsFailied : BOOL
VAR
	NumError	: UDINT;
	Mensaje		: string;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsFailied:=TRUE;	
IF dr.gmModeActual = L1_GEMMA.A6Inicializando THEN
	IsFailied:=FALSE;
	ManageErrors();
ELSIF dr.gmModeActual = L1_GEMMA.A5PreparandoTrasFallo OR dr.gmModeActual=L1_GEMMA.D2TratamientoFallos THEN
	IF mdAlimentador.fbController.NumError <> 0 THEN
		Mensaje := 'Fallo en alimentador, error=';
		NumError :=	mdAlimentador.fbController.NumError;
		
	ELSIF mdPickAndPlaceCarga.fbController.NumError <> 0 THEN
		Mensaje := 'Fallo en brazo de carga, error=';
		NumError := mdPickAndPlaceCarga.fbController.NumError; 
		
	ELSIF mdMedidorTapa.fbController.NumError <> 0 THEN
		Mensaje := 'Fallo en medidor de altura, error=';
		NumError := mdMedidorTapa.fbController.NumError;
		
	ELSIF mdDetectorFotoelectrico.fbController.NumError <> 0 THEN
		Mensaje := 'Fallo en detector fotoeléctrico, error=';
		NumError := mdDetectorFotoelectrico.fbController.NumError;
		
	ELSIF mdCaptadorInductivo.fbController.NumError<>0 THEN
		Mensaje := 'Fallo en captador inductivo, error=';
		NumError := mdCaptadorInductivo.fbController.NumError;
	
	ELSIF mdEvacuador.fbController.NumError <> 0 THEN
		Mensaje := 'Fallo en evacuador, error=';
		NumError := mdEvacuador.fbController.NumError;
		
	ELSIF  mdPickAndPlaceDescarga.fbController.NumError <> 0 THEN
		Mensaje := 'Fallo en brazo de descarga, error=';
		NumError := mdPickAndPlaceDescarga.fbController.NumError;
		
	ELSIF mdPlatoDivisor.fbController.NumError <> 0 THEN
		Mensaje := 'Fallo en plato giratorio, error=';
		NumError := mdPlatoDivisor.fbController.NumError;
		
	ELSIF mdCinta.fbController.NumError <> 0 THEN
		Mensaje := 'Fallo en cinta, error=';
		NumError := mdCinta.fbController.NumError;
	
	ELSE
		fbPanel.swMensaje := '';
		IsFailied := FALSE;
	END_IF
	
	IF IsFailied THEN
		fbPanel.swMensaje := CONCAT(Mensaje, TO_STRING(NumError));
	END_IF

ELSE
	IsFailied:=FALSE;		
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsPaused" Id="{63c7f49b-23e4-43c3-ac69-584bc16d9aec}">
      <Declaration><![CDATA[METHOD IsPaused : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsPaused := 
		mdAlimentador.fbController.IsPaused() AND
		mdPickAndPlaceCarga.fbController.IsPaused() AND
		mdMedidorTapa.fbController.IsPaused() AND 
		mdCaptadorInductivo.fbController.IsPaused() AND
		mdDetectorFotoelectrico.fbController.IsPaused() AND
		mdEvacuador.fbController.isPaused() AND
		mdPickAndPlaceDescarga.fbController.IsPaused() AND
		mdPlatoDivisor.fbController.IsPaused() AND
		mdCinta.fbController.IsPaused(); (* AND
		ctrlF1Producir.IsPaused() AND
		ctrlF2SeqPrep.IsPaused() AND
		ctrlF3SeqFin.IsPaused() AND
		ctrlF6Prueba.IsPaused();*)
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ManageErrors" Id="{fa49f856-5c55-4bc1-adc6-7253af1cd7df}">
      <Declaration><![CDATA[METHOD ManageErrors : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[mdAlimentador.fbController.ResetError();
mdAlimentador.fbController.ResetError();
mdPickAndPlaceCarga.fbController.ResetError();
mdMedidorTapa.fbController.ResetError();
mdCaptadorInductivo.fbController.ResetError();
mdDetectorFotoelectrico.fbController.ResetError();
mdEvacuador.fbController.ResetError();
mdPickAndPlaceDescarga.fbController.ResetError();
mdPlatoDivisor.fbController.ResetError();
mdCinta.fbController.ResetError();
ctrlF1Producir.ResetError();
ctrlF2SeqPrep.ResetError();
ctrlF3SeqFin.ResetError();
ctrlF6Prueba.ResetError();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ProcessCycle" Id="{02e4c75f-69e3-444f-8a2e-ecad65532e26}">
      <Declaration><![CDATA[METHOD ProcessCycle : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// calcular consignas en función del panel y del modo Gemma
dr.Failure 									:= IsFailied();
fbPanel.ProcessCycle(dr:=dr, gmModeActual := dr.gmModeActual, tmReinicio := dr.tmTiempoReinicio);
dr.ProcessCycle(); 

// ejecutar el ciclo de cada Grafcet a nivel estación
ctrlF1Producir.ProcessCycle(dr.gmModeActual);					
ctrlF2SeqPrep.ProcessCycle(dr.gmModeActual);
ctrlF3SeqFin.ProcessCycle(dr.gmModeActual);
ctrlF6Prueba.ProcessCycle(dr.gmModeActual);

// decidir qué tiene que hacer cada módulo
mdAlimentador.Alimentar					:= NOT dr.EndBatch AND NOT tapas.EstaAlimentada; // mdAlimentador.TapaAlimentada;
mdPickAndPlaceCarga.Mover				:= NOT dr.EndBatch AND tapas.EstaAlimentada AND tapas.PuedeCargar(); //  mdAlimentador.TapaAlimentada 
//IF mdPickAndPlaceCarga.TapaMovida THEN
	//mdAlimentador.TapaAlimentada		:= FALSE;
	//tapas.EstaAlimentada				:= FALSE;
	//mdPickAndPlaceCarga.TapaMovida		:= FALSE;	
//END_IF

mdMedidorTapa.Medir						:= tapas.DebeMedir();
mdEvacuador.Evacuar						:= tapas.PuedeEvacuar(gmMode:=dr.gmModeActual);
mdPickAndPlaceDescarga.Mover			:= NOT dr.EndBatch AND mdCinta.Carro_Situado AND tapas.PuedeDescargar();
//IF mdPickAndPlaceDescarga.TapaMovida THEN
	//mdCinta.TapaDescargada				:= TRUE;
	//mdCinta.Transferir					:= TRUE;
	//mdPickAndPlaceDescarga.TapaMovida	:= FALSE;
//END_IF


// controlar el flujo a nivel de la estación
CASE dr.gmModeActual OF
	L1_GEMMA.A1ParadaInicial:						// esperar a que se pida hacer altgo
		dr.EndCycle	:= FALSE;
		dr.EndBatch	:= FALSE;		

	//L1_GEMMA.A3ParadaEstado: 						// esperar la puesta en marcha o reanudar tras parada		
	//L1_GEMMA.A4ParadaObtenida:
	//	dr.IsPaused := IsPaused(); 

	L1_GEMMA.A5PreparandoTrasFallo:
		ManageErrors();		

	L1_GEMMA.A6Inicializando:
		dr.Failure						:= FALSE;
		dr.IsPaused						:= FALSE;
		dr.IC							:= InitialConditions();
		tapas.Inicializar();		
		
	L1_GEMMA.D1ParadaEmergencia:
		dr.IC							:= FALSE;	// obliga a ejecutar la inicialización
		
	L1_GEMMA.D2TratamientoFallos:					// esperar a que el usuario arregle el error
		dr.Failure 		:= IsFailied(); 			// redundante. ManageErrors(); ?
		
	L1_GEMMA.F1ProduccionNormal,
	L1_GEMMA.A2ParaFinCiclo:
		ctrlF1Producir.IC 				:= InitialConditions();
		dr.EndCycle 					:= ctrlF1Producir.Done;
		IF ctrlF1Producir.Done THEN
			dr.EndCycle					:= TRUE;
			dr.cnA3_Estado				:= dr.cnA2_FinCiclo;
			ctrlF1Producir.Execute		:= FALSE;
			ctrlF1Producir.Ack			:= TRUE;			
			dr.EndBatch 				:= tapas.ResReal >= tapas.ReqNumero;			
		ELSIF ctrlF1Producir.Ready AND NOT dr.EndCycle THEN
			dr.EndCycle					:= FALSE;
			ctrlF1Producir.Execute		:= TRUE;
			ctrlF1Producir.Ack			:= FALSE;
		END_IF
		ctrlF1Producir(	Alime:=mdAlimentador, Carga:=mdPickAndPlaceCarga, Medid:=mdMedidorTapa, 
				Fotoe:=mdDetectorFotoelectrico, Induc:=mdCaptadorInductivo, Evacu:=mdEvacuador,	
				Desca:=mdPickAndPlaceDescarga, Plato:=mdPlatoDivisor, Cinta:=mdCinta);						
	
	L1_GEMMA.F2SecuenciaPreparacion:		
		//ctrlF2SeqPrep.IC				:= InitialConditions();			
		IF ctrlF2SeqPrep.Ready THEN
			ctrlF2SeqPrep.Execute		:= TRUE; // ctrlF2SeqPrep.Ready;
			ctrlF2SeqPrep.Ack			:= FALSE;
			//ctrlF2SeqPrep.cnF2_Preparar	:= dr.cnF2_Preparar;
		ELSIF ctrlF2SeqPrep.Done THEN
			dr.cnF2_Preparar		:= FALSE;
			ctrlF2SeqPrep.Execute 	:= FALSE;
			ctrlF2SeqPrep.Ack		:= TRUE;
		END_IF
		ctrlF2SeqPrep(Medid:=mdMedidorTapa, Fotoe:=mdDetectorFotoelectrico, Induc:=mdCaptadorInductivo, Plato:=mdPlatoDivisor);

	L1_GEMMA.F3SecuenciaFinalizacion:
		//ctrlF3SeqFin.IC					:= InitialConditions();
		IF ctrlF3SeqFin.Ready THEN
			ctrlF3SeqFin.Execute 		:= TRUE;
			ctrlF3SeqFin.Ack			:= FALSE;
		ELSIF ctrlF3SeqFin.Done THEN
			dr.cnF3_Finalizar 			:= FALSE;
			ctrlF3SeqFin.Execute 		:= FALSE;
			ctrlF3SeqFin.Ack			:= TRUE;
			dr.cnF1_Producir			:= FALSE;
			dr.cnF2_Preparar			:= FALSE;
			dr.cnF3_Finalizar			:= FALSE;
		END_IF
		ctrlF3SeqFin(Evacu:=mdEvacuador, Plato:=mdPlatoDivisor);	
							
	L1_GEMMA.F4VerificacionSinOrden: 
		IF fbPanel.swF4_Avanza THEN		
			mdCinta.RUN.ForceValue(NewValue:=TRUE);
			mdCinta.REV.ForceValue(NewValue:=FALSE);
		ELSIF fbPanel.swF4_Retroc THEN
			mdCinta.RUN.ForceValue(NewValue:=TRUE);
			mdCinta.REV.ForceValue(NewValue:=TRUE);
		END_IF		

	L1_GEMMA.F5VerificacionOrdenada:
		mdAlimentador.Execute          		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Alimentar; 		//tapas.ExeAlime; mdAlimentador.Alimentar AND 
		mdMedidorTapa.Execute          		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Medir; 		//tapas.ExeMedid;
		mdDetectorFotoelectrico.Execute		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Claridad; 	//  tapas.ExeFotoe;
		mdCaptadorInductivo.Execute    		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Material;
		mdPickAndPlaceCarga.Execute			:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Cargar; 		// AND fbPanel.swF5_Ejecutar;
		mdEvacuador.Execute            		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Evacuar;	 	//tapas.ExeEvacu;
		mdPickAndPlaceDescarga.Execute		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Descargar;
		mdPlatoDivisor.Execute       		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Girar;				
		mdCinta.Execute						:= fbPanel.swF5_Ejecutar AND  
												((mdCinta.Situar AND fbPanel.swF5_Situar ) OR (mdCinta.Transferir AND fbPanel.swF5_Transferir));
		IF NOT mdCinta.Carro_Situado AND fbPanel.swF5_Situar THEN
			mdCinta.Situar						:= TRUE;
			mdCinta.Transferir					:= FALSE;	
		ELSIF mdCinta.Carro_Situado AND NOT mdCinta.Carro_Transfer AND fbPanel.swF5_Transferir THEN
			mdCinta.Situar						:= FALSE;
			mdCinta.Transferir					:= TRUE; 
		END_IF
		mdAlimentador.Ack               := fbPanel.swF5_Ack AND fbPanel.swF5_Alimentar;
		mdPickAndPlaceCarga.Ack         := fbPanel.swF5_Ack AND fbPanel.swF5_Cargar;
		mdMedidorTapa.Ack               := fbPanel.swF5_Ack AND fbPanel.swF5_Medir;
		mdDetectorFotoelectrico.Ack		:= fbPanel.swF5_Ack AND fbPanel.swF5_Claridad;
		mdCaptadorInductivo.Ack         := fbPanel.swF5_Ack AND fbPanel.swF5_Material;
		mdEvacuador.Ack                 := fbPanel.swF5_Ack AND fbPanel.swF5_Evacuar;
		mdPickAndPlaceDescarga.Ack      := fbPanel.swF5_Ack AND fbPanel.swF5_Descargar;
		mdPlatoDivisor.Ack              := fbPanel.swF5_Ack AND fbPanel.swF5_Girar;
		mdCinta.Ack						:= fbPanel.swF5_Ack AND (fbPanel.swF5_Situar OR fbPanel.swF5_Transferir);			
				
	L1_GEMMA.F6Probando:
		ctrlF6Prueba.IC					:= InitialConditions();
		IF ctrlF6Prueba.Ready THEN
			ctrlF6Prueba.Execute 		:= TRUE;
			ctrlF6Prueba.Ack			:= FALSE;
		ELSIF ctrlF6Prueba.Done THEN
			ctrlF6Prueba.Ack			:= TRUE;
			ctrlF6Prueba.Execute		:= FALSE;			
		END_IF			
		ctrlF6Prueba(	Alime:=mdAlimentador, Carga:=mdPickAndPlaceCarga, Medid:=mdMedidorTapa, 
			Fotoe:=mdDetectorFotoelectrico, Induc:=mdCaptadorInductivo, Evacu:=mdEvacuador,	
			Desca:=mdPickAndPlaceDescarga, Plato:=mdPlatoDivisor, Cinta:=mdCinta);
	
END_CASE

mdAlimentador.ProcessCycle				(dr:=dr, tapas:=tapas); // ejecutar el ciclo de cada uno de los módulos
mdPickAndPlaceCarga.ProcessCycle		(dr:=dr, tapas:=tapas);
mdMedidorTapa.ProcessCycle				(dr:=dr, tapas:=tapas);	
mdDetectorFotoelectrico.ProcessCycle	(dr:=dr, tapas:=tapas);
mdCaptadorInductivo.ProcessCycle		(dr:=dr, tapas:=tapas);
mdEvacuador.ProcessCycle				(dr:=dr, tapas:=tapas);
mdPickAndPlaceDescarga.ProcessCycle		(dr:=dr, tapas:=tapas);
mdPlatoDivisor.ProcessCycle				(dr:=dr, tapas:=tapas);
mdCinta.ProcessCycle					(dr:=dr, tapas:=tapas);
tapas.ProcessCycle						(dr:=dr, pn:=fbPanel, NumGiros := mdPlatoDivisor.NumGiros); 
		]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>