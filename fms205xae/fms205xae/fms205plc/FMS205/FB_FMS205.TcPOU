<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_FMS205" Id="{a261f573-1402-443e-9bab-e88e0bf02070}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FMS205

VAR_INPUT
	IC		: BOOL := FALSE; 	// todos los módulos están en condiciones iniciales
    Execute	: BOOL;
END_VAR

VAR_OUTPUT
	Ready	: BOOL;
	Failure	: BOOL;
	Done	: BOOL;	
END_VAR	
	
VAR
	// Director, panel y tapas
	dr						: FB_Director;
	fbPanel					: FB_Panel := (dr := dr);	
	tapas					: FB_Tapas;
	
	// módulos de la FMS205
	mdAlimentador			: FB_Alimentador			:= (dr:=dr, ID := 1, Name := 'Alimentador');
	mdPickAndPlaceCarga 	: FB_PickAndPlace			:= (dr:=dr, ID := 2, Name := 'Carga');
	mdMedidorTapa			: FB_MedidorTapa			:= (dr:=dr, ID := 3, Name := 'Medidor');
	mdCaptadorInductivo 	: FB_CaptadorInductivo		:= (dr:=dr, ID := 4, Name := 'Inductivo');
	mdDetectorFotoelectrico : FB_DetectorFotoelectrico	:= (dr:=dr, ID := 5, Name := 'Fotoeléctrico');
	mdEvacuador			 	: FB_Evacuador				:= (dr:=dr, ID := 6, Name := 'Evacuador');
	mdPickAndPlaceDescarga 	: FB_PickAndPlace			:= (dr:=dr, ID := 7, Name := 'Descarga');
	mdPlatoDivisor			: FB_PlatoDivisor			:= (dr:=dr, ID := 8, Name := 'Plato');
	mdCinta					: FB_Cinta					:= (dr:=dr, ID := 9, Name := 'Cinta');
	
	// controladores a nivel estación
	ctrlF1Producir			: FB_FMS205_F1Producir_SFC; 
	ctrlF2SeqPrep			: FB_FMS205_F2SeqPrep_SFC;		
	ctrlF3SeqFin			: FB_FMS205_F3SeqFin_SFC;		
	ctrlF6Prueba			: FB_FMS205_F6Prueba_SFC;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FlowControl" Id="{7553d21c-2ad5-400d-89ea-a2f83e6494f7}">
      <Declaration><![CDATA[METHOD FlowControl : BOOL

]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE dr.gmModeActual OF
	
	E_GEMMA.A1ParadaInicial,
	E_GEMMA.A4ParadaObtenida:
		; // esperar la puesta en marcha o reanudar tras parada

	E_GEMMA.A2ParaFinCiclo,
	E_GEMMA.F1ProduccionNormal:
		IF tapas.ResReal >= tapas.ReqNumero THEN
			dr.EndBatch := TRUE;
		ELSE
			ctrlF1Producir.IC 				:= InitialConditions();
			IF ctrlF1Producir.Ready THEN 	// al principio de cada ciclo decidir qué hacer con cada tapa antes del giro
				mdPickAndPlaceCarga.Mover 	:= tapas.DebeCargar();
				mdEvacuador.Evacuar 		:= tapas.DebeEvacuar(); 
				mdPickAndPlaceDescarga.Mover:= tapas.DebeDescargar();
				ctrlF1Producir.Execute 		:= TRUE;
			ELSIF ctrlF1Producir.Done THEN
				ctrlF1Producir.Execute		:= FALSE; 	// no pasar al siguiente ciclo hasta decidir qué hacer con las tapas
				ctrlF1Producir.Ack			:= IsReady(gmModeActual := E_GEMMA.F1ProduccionNormal); // enviar el ack sólo si los módulos estén Ready
				dr.EndCycle 				:= TRUE;
			END_IF
			ctrlF1Producir(Alime:=mdAlimentador, Carga:=mdPickAndPlaceCarga, Medid:=mdMedidorTapa, Fotoe:=mdDetectorFotoelectrico, 
				Induc:=mdCaptadorInductivo, Evacu:=mdEvacuador,	Desca:=mdPickAndPlaceDescarga, Plato:=mdPlatoDivisor, Cinta:=mdCinta);
			
		END_IF
						
	E_GEMMA.A3ParadaEstado: 
		dr.IsPaused 						:= IsPaused(); // el director debe esperar a que todos los módulos se detengan
	
	E_GEMMA.A5PreparandoTrasFallo:
		; // pendiente implementar
 
	E_GEMMA.A6Inicializando:
		tapas.Inicializar();
		dr.IC								:= InitialConditions();

	E_GEMMA.F2SecuenciaPreparacion:
		dr.IsPrepared 						:= NOT fbPanel.cnF2_Preparar OR ctrlF2SeqPrep.Done;
		ctrlF2SeqPrep.Execute 				:= fbPanel.cnF2_Preparar AND NOT ctrlF2SeqPrep.Done;
		ctrlF2SeqPrep.Ack					:= IsReady(gmModeActual := E_GEMMA.F2SecuenciaPreparacion);  
		ctrlF2SeqPrep(Medid:=mdMedidorTapa, Fotoe:=mdDetectorFotoelectrico,	Induc:=mdCaptadorInductivo, Plato:=mdPlatoDivisor);
				
	E_GEMMA.F3SecuenciaFinalizacion:
		dr.IsFinished						:= NOT ctrlF3SeqFin.Execute OR ctrlF3SeqFin.Done;
		ctrlF3SeqFin.Execute 				:= fbPanel.cnF3_Finalizar AND NOT ctrlF3SeqFin.Done;
		ctrlF3SeqFin.Ack					:= IsReady(gmModeActual := E_GEMMA.F3SecuenciaFinalizacion);
		ctrlF3SeqFin(Evacu:=mdEvacuador, Plato:=mdPlatoDivisor);
		
	E_GEMMA.F4VerificacionSinOrden: 
		IF fbPanel.swF4_Avanza THEN		
			mdCinta.Avanza();				// si se pulsa avanzar activar RUN y desactivar REV
		ELSIF fbPanel.swF4_Retroc THEN
			mdCinta.Retrocede();			// si se pulsa retrocede activar RUN y REV
		END_IF
				
	E_GEMMA.F5VerificacionOrdenada: 		// tener en cuenta las consignas relacionadas con F5 		
		mdAlimentador.Execute          		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Alimentar;
		mdPickAndPlaceCarga.Execute    		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Cargar;
		mdMedidorTapa.Execute          		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Medir;
		mdDetectorFotoelectrico.Execute		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Claridad;
		mdCaptadorInductivo.Execute    		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Material;
		mdEvacuador.Execute            		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Evacuar;
		mdPickAndPlaceDescarga.Execute		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Descargar;
		mdPlatoDivisor.Execute       		:= fbPanel.swF5_Ejecutar AND fbPanel.swF5_Girar;
		mdCinta.Situar						:= fbPanel.swF5_Situar;
		mdCinta.Transferir					:= fbPanel.swF5_Transferir;
		mdCinta.Execute						:= fbPanel.swF5_Ejecutar AND (fbPanel.swF5_Situar OR fbPanel.swF5_Transferir);
		
		mdPickAndPlaceCarga.Mover	    	:= TRUE; 
		mdEvacuador.Evacuar 				:= TRUE; 
		mdPickAndPlaceDescarga.Mover		:= TRUE; 

		mdAlimentador.Ack               	:= fbPanel.swF5_Ack AND fbPanel.swF5_Alimentar;
		mdPickAndPlaceCarga.Ack         	:= fbPanel.swF5_Ack AND fbPanel.swF5_Cargar;
		mdMedidorTapa.Ack               	:= fbPanel.swF5_Ack AND fbPanel.swF5_Medir;
		mdDetectorFotoelectrico.Ack			:= fbPanel.swF5_Ack AND fbPanel.swF5_Claridad;
		mdCaptadorInductivo.Ack         	:= fbPanel.swF5_Ack AND fbPanel.swF5_Material;
		mdEvacuador.Ack                 	:= fbPanel.swF5_Ack AND fbPanel.swF5_Evacuar;
		mdPickAndPlaceDescarga.Ack      	:= fbPanel.swF5_Ack AND fbPanel.swF5_Descargar;
		mdPlatoDivisor.Ack              	:= fbPanel.swF5_Ack AND fbPanel.swF5_Girar;
		mdCinta.Ack							:= fbPanel.swF5_Ack AND (fbPanel.swF5_Situar OR fbPanel.swF5_Transferir);

	E_GEMMA.F6Probando:
		ctrlF6Prueba.Execute 				:= fbPanel.cnF6_Probar AND NOT ctrlF6Prueba.Done;
		ctrlF6Prueba.Ack					:= IsReady(gmModeActual := E_GEMMA.F6Probando); 
		ctrlF6Prueba(Alime:=mdAlimentador, Carga:=mdPickAndPlaceCarga, Medid:=mdMedidorTapa, Fotoe:=mdDetectorFotoelectrico, 
			Induc:=mdCaptadorInductivo, Evacu:=mdEvacuador,	Desca:=mdPickAndPlaceDescarga, Plato:=mdPlatoDivisor, Cinta:=mdCinta);
			
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitialConditions" Id="{6c17034c-aab7-41fb-b0b6-e85a6db67498}">
      <Declaration><![CDATA[METHOD InitialConditions : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* La estación está en condiciones iniciales si cada módulo lo está *)
InitialConditions := (
		mdAlimentador.IC AND
		mdPickAndPlaceCarga.IC AND
		mdMedidorTapa.IC AND 
		mdCaptadorInductivo.IC AND
		mdDetectorFotoelectrico.IC AND
		mdEvacuador.IC AND
		mdPickAndPlaceDescarga.IC AND
		mdPlatoDivisor.IC AND
		mdCinta.IC )  OR dr.gmLocalHost;
	 ]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsPaused" Id="{63c7f49b-23e4-43c3-ac69-584bc16d9aec}">
      <Declaration><![CDATA[METHOD IsPaused : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsPaused := (
		mdAlimentador.fbController.IsPaused() AND
		mdPickAndPlaceCarga.fbController.IsPaused() AND
		mdMedidorTapa.fbController.IsPaused() AND 
		mdCaptadorInductivo.fbController.IsPaused() AND
		mdDetectorFotoelectrico.fbController.IsPaused() AND
		mdEvacuador.fbController.isPaused() AND
		mdPickAndPlaceDescarga.fbController.IsPaused() AND
		mdPlatoDivisor.fbController.IsPaused() AND
		mdCinta.fbController.IsPaused());
]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsReady" Id="{22492767-8d7d-4c2f-892d-876b7dde965e}">
      <Declaration><![CDATA[METHOD IsReady : BOOL
VAR_INPUT
	gmModeActual	: E_GEMMA;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE gmModeActual OF
	
	E_GEMMA.F1ProduccionNormal,
	E_GEMMA.F6Probando: 
		IsReady := (
			mdAlimentador.fbController.Ready AND
			mdPickAndPlaceCarga.fbController.Ready AND
			mdMedidorTapa.fbController.Ready AND 
			mdCaptadorInductivo.fbController.Ready AND
			mdDetectorFotoelectrico.fbController.Ready AND
			mdEvacuador.fbController.Ready AND
			mdPickAndPlaceDescarga.fbController.Ready AND
			mdPlatoDivisor.fbController.Ready AND
			mdCinta.fbController.Ready);
			
	 E_GEMMA.F2SecuenciaPreparacion: 
		IsReady := (
			mdMedidorTapa.fbController.Ready AND 
			mdCaptadorInductivo.fbController.Ready AND
			mdDetectorFotoelectrico.fbController.Ready AND
			mdPlatoDivisor.fbController.Ready);
	
	E_GEMMA.F3SecuenciaFinalizacion: 
		IsReady := (
			mdEvacuador.fbController.Ready AND
			mdPlatoDivisor.fbController.Ready);
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ProcessCycle" Id="{02e4c75f-69e3-444f-8a2e-ecad65532e26}">
      <Declaration><![CDATA[METHOD ProcessCycle : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// calcular consignas en función del panel y del modo Gemma
fbPanel.ProcessCycle(gmModeActual := dr.gmModeActual, tmReinicio := dr.tmTiempoReinicio); 
dr.IC  := InitialConditions();
dr.ProcessCycle(pn:=fbPanel);

// controlar el flujo a nivel de la estación
FlowControl();
ctrlF1Producir.PauseAndReset(dr.gmModeActual);
ctrlF2SeqPrep.PauseAndReset(dr.gmModeActual);
ctrlF3SeqFin.PauseAndReset(dr.gmModeActual);
ctrlF6Prueba.PauseAndReset(dr.gmModeActual);

// ejecutar el ciclo de cada uno de los módulos
mdAlimentador.ProcessCycle				(dr:=dr, tapas:=tapas);
mdPickAndPlaceCarga.ProcessCycle		(dr:=dr, tapas:=tapas);
mdMedidorTapa.ProcessCycle				(dr:=dr, tapas:=tapas);	
mdDetectorFotoelectrico.ProcessCycle	(dr:=dr, tapas:=tapas);
mdCaptadorInductivo.ProcessCycle		(dr:=dr, tapas:=tapas);
mdEvacuador.ProcessCycle				(dr:=dr, tapas:=tapas);
mdPickAndPlaceDescarga.ProcessCycle		(dr:=dr, tapas:=tapas);
mdPlatoDivisor.ProcessCycle				(dr:=dr, tapas:=tapas);
mdCinta.ProcessCycle					(dr:=dr, tapas:=tapas);

// actualizar la interfaz de usuario
tapas.Actualizar();
tapas.Animar(PlatoActivo := NOT mdPlatoDivisor.fbController.Ready);
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>