<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_Panel" Id="{514e5db3-ac71-4add-977b-df9fa295436c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Panel
VAR_INPUT
	dr: REFERENCE TO FB_Director;
END_VAR

VAR_OUTPUT
	// consignas del panel únicamente en la visualización
	cnUmbralAlta		: REAL := 18.5;
	cnProdAluBaja		: BOOL := TRUE;
	cnProdAluAlta		: BOOL := TRUE;
	cnProdBlaBaja		: BOOL := TRUE;
	cnProdBlaAlta		: BOOL := TRUE;
	cnProdNegAlta		: BOOL := TRUE;
	cnProdNegBaja		: BOOL := FALSE;	

	// consignas del panel, resultado de integrar la información que viene del hardware, el estado GEMMA, los temporizadores y flancos, y la interfaz de usuario
		
	cnD1_Emergencia	: BOOL; // pulsar la seta
	hwPE_Seta		: BOOL; // seta en el panel físico
	swPE_Seta		: BOOL; // botón en la visualización
	ttPE_Seta		: STRING := '';
	
	cnF4_Planta			: BOOL; // modo verificación sin orden
	swF4_Planta			: BOOL; // botón en la visualización
	ttF4_Planta			: STRING :='';
	swF4_Avanza			: BOOL := FALSE;
 	swF4_Retroc			: BOOL := FALSE;
	
END_VAR


VAR_OUTPUT
	//cn						: S_Panel_Consignas; //
	TmpReinicio				: TON; 
	FP_PM					: R_TRIG;
	Probando:	BOOL;	// DESDE LA VISU		Vamos a hacer pruebas

		
    (*
	Emergencia: BOOL; 	// := PE 				Parada de emergencia (seta)
 
						// POC - 				Conmutador PO Conectada  (negra)
	Marcha: BOOL; 		// :=FP_PM.Q 			Pulsador de marcha (verde)
    Reinicia: BOOL; 	// :=T(PM AND NOT PS) 	Restablece situacion inicial
	Restablece: BOOL;	// :=PM					Restablece la condición de fallo
	Restaura: BOOL;		// :=PM					Restaura condiciones iniciales
	
	Para: BOOL; 		// :=NOT PS				Pulsador de parada (rojo)
    Manual: BOOL; 		// :=SM			Conmutador de automático/manual (negro)
						// Pulsador de reset (azul)												

	// variables relacionadas con las pruebas de desarrollo
	ProbarExecute: 	BOOL;
	ProbarAck: BOOL;
	*)
	
	cnManual			: BOOL; // Selector manual/automático
	cnReinicia			: BOOL; // DUDAS reinicia la situación inicial
	cnRestablece		: BOOL; // restablece la condición de fallo
	cnRestaura			: BOOL; // DUDAS restaura condiciones iniciales
	cnMarcha			: BOOL; // 
	cnPara				: BOOL; //
END_VAR
VAR
	hw 						: S_Panel_Hardware; // estado de sensores y actuadores del panel físico
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
	

// invoca a temporizadores y flancos
//TmpReinicio(IN := hw.PM_PulsadorMarcha AND NOT hw.PS_PulsadorStop, PT:= tm.TiempoReinicio);
FP_PM(CLk := hw.PM_PulsadorMarcha);

// calcula el estado de las consignas
// DUDAS - No habría que tener en cuenta el modo de GEMMA para informar Reinicia, Restaura, ...?

// Consignas
cnManual 			:= hw.SM_SelecAutoManual; 		// ídem
cnReinicia			:= TmpReinicio.Q;
cnRestablece		:= hw.PM_PulsadorMarcha;
cnRestaura			:= hw.PM_PulsadorMarcha;
cnMarcha			:= FP_PM.Q;
cnPara				:= NOT hw.PS_PulsadorStop;
//cnPruebas			:= Probando;

// Señales

hw.AS_AvisadorSonoro := 
	dr.gmModeActual = E_GEMMA.F3SecuenciaFinalizacion OR
	(
		(
			dr.gmModeActual = E_GEMMA.D1ParadaEmergencia OR
			dr.gmModeActual = E_GEMMA.D2TratamientoFallos OR 
			dr.gmModeActual = E_GEMMA.F2SecuenciaPreparacion 
		) AND FALSE
	); //  TODO - TERMINAR LA IMPLENTACIÓN CON EL RELOJ - CLK.Q;
	
hw.LA_LamparaAlarma := 
	dr.gmModeActual = E_GEMMA.A6Inicializando OR
	(
		(
			dr.gmModeActual = E_GEMMA.D1ParadaEmergencia OR
			dr.gmModeActual = E_GEMMA.D2TratamientoFallos
		) 
		AND TRUE
	);  //  TODO - TERMINAR LA IMPLENTACIÓN CON EL RELOJ - CLK.Q;

hw.LM_LamparaMarcha := 	
	dr.gmModeActual = E_GEMMA.A2ParaFinCiclo OR
	dr.gmModeActual = E_GEMMA.F1ProduccionNormal OR
	dr.gmModeActual = E_GEMMA.F2SecuenciaPreparacion OR
	dr.gmModeActual = E_GEMMA.F3SecuenciaFinalizacion OR
	(
		dr.gmModeActual = E_GEMMA.A1ParadaInicial AND TRUE 
	);  //  TODO - TERMINAR LA IMPLENTACIÓN CON EL RELOJ - CLK.Q; 
]]></ST>
    </Implementation>
    <Method Name="ProcessCycle" Id="{026a1e81-704d-4f95-ae3e-7d143e02920e}">
      <Declaration><![CDATA[METHOD ProcessCycle : BOOL
VAR_INPUT
	gmModeActual	: E_GEMMA;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Modo D1
cnD1_Emergencia 		:= hwPE_Seta OR swPE_Seta; 
IF hwPE_Seta THEN
	IF swPE_Seta THEN
		ttPE_Seta := 'Desarmar la seta y desactivar el botón para reinicializar';
	ELSE
		ttPE_Seta := 'Desarmar la seta para reinicializar';		
	END_IF
ELSE
	IF swPE_Seta THEN
		ttPE_Seta := 'Desactivar el botón para reinicializar';
	ELSE
		ttPE_Seta := 'Pulsar la seta o el botón para parada de emergencia';	
	END_IF
END_IF


// Modo F4
// sólo se puede entrar o salir del modo F4 desde determinados estados
IF (gmModeActual = E_GEMMA.A6Inicializando OR 
	gmModeActual = E_GEMMA.A1ParadaInicial OR		
	gmModeActual = E_GEMMA.F4VerificacionSinOrden) THEN
	
	cnF4_Planta := swF4_Planta;
END_IF 
	
IF cnF4_Planta THEN
	ttF4_Planta := 'Mandos directos activos';
	IF swF4_Avanza THEN
		swF4_Retroc := FALSE;
	ELSIF
		swF4_Retroc THEN
		swF4_Avanza := FALSE;
	END_IF
ELSE
	swF4_Planta := FALSE; // si no se puede entrar en modo F4 hay que desactivar el botón
	ttF4_Planta := 'Mandos directos inactivos';
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>