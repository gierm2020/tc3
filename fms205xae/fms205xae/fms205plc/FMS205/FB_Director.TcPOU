<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <POU Name="FB_Director" Id="{1485be2f-2009-4092-b7e4-7ed9a9ca4fab}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Director
VAR_INPUT
	IC 				: BOOL := TRUE; 	// todos los módulos están en condiciones iniciales
	Failure			: BOOL := FALSE;	// hay al menos un módulo que ha fallado
	EndCycle		: BOOL := FALSE;	// se ha completado un ciclo con/sin rechazo/descarga
	EndBatch		: BOOL := FALSE; 	// se han completado todas las tapas del lote
	IsPaused		: BOOL := TRUE; 	// estación en estado estable con todos los módulos detenidos
	IsPrepared		: BOOL := TRUE; 	// secuencia de preparación completada
	IsFinished		: BOOL := TRUE; 	// secuencia de finalización completada
END_VAR


VAR CONSTANT
	gmColorArret 	: DWORD := 16#FF808080;
	gmColorFonct 	: DWORD := 16#FF000080;
	gmColorDefail 	: DWORD := 16#ff800000;
END_VAR


VAR_OUTPUT
	gmLocalHost		: BOOL 		:= FALSE; 	// TODO - SUSTITUIR ESTO POR LA CONDICIÓN DE LOCALHOST
	
	gmFamiArret		: BOOL 		:= TRUE; 	// Familia de parada
	gmFamiFonct		: BOOL 		:= FALSE; 	// Familia de funcionamiento
	gmFamiDefail	: BOOL 		:= FALSE; 	// Familia de salida de fallos
	
	gmModeActual	: E_GEMMA 	:= E_GEMMA.A6Inicializando; 		// Modo GEMMA actual
	gmModePrev		: E_GEMMA; 				// Modo GEMMA anterior al actual
	gmModeColor		: DWORD 	:= gmColorArret;
	gmModeName		: STRING 	:= 'Mode A6';
	gmModeDescr		: STRING 	:= 'Inicializando';
	
	Tic				: BOOL		:= FALSE; 	// Se activa y desactiva cada 500 ms
	Clock			: TON;					// Temporizador para activar/desactivar Tic
END_VAR	

VAR
	// Velocidad variable de los controladores
	Speed						: REAL := 100.0;
	
	
	//---------------------------------- dt_ Defalut Times
	
	// Tiempos generales
	dt_MaximoTiempoRespuesta	: TIME := T#5S;
	dt_TiempoReinicio			: TIME := T#5S;
	
	dt_K_1 						: TIME := T#1S;				// Temporizador empujador tapa
	dt_R_1						: TIME := T#0.5S;			// Temporizador retenedor de la cinta
	dt_S_1						: TIME := T#0.5S;			// Temporizador separador de la cinta
	dt_EP						: TIME := T#0.5S;			// Tiempo de entrada del pale
	dt_TP						: TIME := T#1S;				// Tiempo de transferencia del pale
	dt_XP						: TIME := T#1S;				// Tiempo de salida del pale
	dt_SOL 						: TIME := T#100MS; 			// tiempo después de soltar y antes de subir
	dt_V_1						: TIME := T#5S;				// tiempo máximo succionando sin que se active el sensor v1
	dt_L_1						: TIME := T#1S;				// tiempo máximo de bajada del medidor de tapas
	dt_PIN 						: TIME := T#1S;				// tiempo para pinzar una tapa antes de subir el brazo
	dt_E_1						: TIME := T#400MS;			// tiempo para que el retenedor bloquee el plato
	dt_D_1 						: TIME := T#1.4S;			// tiempo para girar el plato a la siguiente posición
END_VAR


VAR_OUTPUT
	tmMaximoTiempoRespuesta		: TIME := dt_MaximoTiempoRespuesta;
	tmTiempoReinicio			: TIME := dt_TiempoReinicio;	
	tmK_1 						: TIME := dt_K_1;			// Temporizador empujador tapa
	tmR_1						: TIME := dt_R_1;			// Temporizador retenedor de la cinta
	tmS_1						: TIME := dt_S_1;			// Temporizador separador de la cinta
	tmEP						: TIME := dt_EP;			// Tiempo de entrada del pale
	tmTP						: TIME := dt_TP;			// Tiempo de transferencia del pale
	tmXP						: TIME := dt_XP;			// Tiempo de salida del pale
	tmSOL 						: TIME := dt_SOL; 			// tiempo después de soltar y antes de subir
	tmV_1						: TIME := dt_V_1;			// tiempo máximo succionando sin que se active el sensor v1
	tmL_1						: TIME := dt_L_1;		// tiempo máximo de bajada del medidor de tapas
	tmPIN 						: TIME := dt_PIN;		// tiempo para pinzar una tapa antes de subir el brazo
	tmE_1						: TIME := dt_E_1;		// tiempo para que el retenedor bloquee el plato
	tmD_1 						: TIME := dt_D_1;		// tiempo para girar el plato a la siguiente posición
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ProcessCycle" Id="{9978d0af-5f0b-4b42-9ddf-3fb2a96798f7}">
      <Declaration><![CDATA[METHOD ProcessCycle : BOOL
VAR_INPUT
	pn				: REFERENCE TO FB_Panel;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pn.cnD1_Emergencia THEN
    gmModeActual := E_GEMMA.D1ParadaEmergencia;
	
ELSIF pn.cnA6_Inicializar THEN 
    gmModeActual := E_GEMMA.A6Inicializando;
	
ELSE
    CASE gmModeActual OF
		
	
        (* ------------------------------------------------------------ Procedimientos de parada *)
		
        E_GEMMA.A1ParadaInicial: (* Parada en el estado inicial *)
			gmModePrev := E_GEMMA.A1ParadaInicial;
            IF NOT IC THEN // IF NOT Restaurada THEN
                gmModeActual := E_GEMMA.A6Inicializando;				
            ELSIF pn.cnF4_Planta THEN 				
                gmModeActual := E_GEMMA.F4VerificacionSinOrden;				
			ELSIF pn.cnF5_Funcion THEN 
				gmModeActual := E_GEMMA.F5VerificacionOrdenada;             
			ELSIF pn.cnF1_Empezar THEN
                gmModeActual := E_GEMMA.F2SecuenciaPreparacion;
			ELSE
				; // Esperar a que se pulse el bortón de marcha
            END_IF
			
        E_GEMMA.A2ParaFinCiclo: (* Parada solicitada a final de ciclo *)
			IF Failure THEN                
                gmModeActual := E_GEMMA.D2TratamientoFallos;
			ELSIF pn.cnA3_Estado THEN // solicitan parada inmediata porque no pueden esperar a fin de ciclo
				gmModeActual := E_GEMMA.A3ParadaEstado;				
            ELSIF EndCycle THEN
                gmModeActual := E_GEMMA.A3ParadaEstado;
            ELSE                
                ; // Seguir produciendo hasta final de ciclo
            END_IF
			
        E_GEMMA.A3ParadaEstado: (* Parada solicitada en un estado determinado *)
            IF Failure THEN
                gmModeActual := E_GEMMA.D2TratamientoFallos;
			ELSIF IsPaused THEN
                gmModeActual := E_GEMMA.A4ParadaObtenida;
            ELSE
                ; // Seguir produciendo hasta que todos los módulos paren en un estado estable
            END_IF
            			
        E_GEMMA.A4ParadaObtenida:
			IF pn.cnF1_Reanudar THEN
				gmModeActual := gmModePrev; // retomar el estado antes de la parada
			ELSE
				; // seguir parada hasta la consigna de reanudar	
			END_IF
                    
		E_GEMMA.A5PreparandoTrasFallo: (* Preparando de reanudacion tras el fallo *)
            IF pn.cnF1_Empezar THEN //  fbPanel.cn.Marcha THEN // Continua
                gmModeActual := gmModePrev;
			ELSIF pn.cnF4_Planta THEN 
                gmModeActual := E_GEMMA.F4VerificacionSinOrden;
            END_IF
			
        E_GEMMA.A6Inicializando: (* Situando la PO en el estado inicial *)
			gmModePrev := E_GEMMA.A6Inicializando;
            IF IC THEN 
                gmModeActual := E_GEMMA.A1ParadaInicial;
			ELSIF pn.cnF4_Planta THEN 				
                gmModeActual := E_GEMMA.F4VerificacionSinOrden;
            END_IF
			
        E_GEMMA.A7SituandoEstado: (* Situando la PO en un estado determinado *)
            ; // estado no tratado en la FMS205

			
			
        (* ------------------------------------------------------------ Procedimientos de funcionamiento *)
        
        E_GEMMA.F2SecuenciaPreparacion, 	(* Secuencia de preparacion *)
		E_GEMMA.F1ProduccionNormal, 		(* Produccion normal *)
		E_GEMMA.F3SecuenciaFinalizacion, 	(* Secuencia de finalizacion *)
        E_GEMMA.F5VerificacionOrdenada,  	(* Verificacion en orden *)
		E_GEMMA.F6Probando: 				(* Prueba secuencial de carga de una tapa *)
        
			IF gmModeActual <> E_GEMMA.F5VerificacionOrdenada THEN
				gmModePrev := gmModeActual;	
			END_IF			
			
            IF Failure THEN
                gmModeActual := E_GEMMA.D2TratamientoFallos;

			// cambiar de modo
            ELSIF gmModeActual=E_GEMMA.F2SecuenciaPreparacion AND IsPrepared THEN 
                gmModeActual := E_GEMMA.F1ProduccionNormal;
			ELSIF gmModeActual=E_GEMMA.F1ProduccionNormal AND EndBatch THEN
                gmModeActual := E_GEMMA.F3SecuenciaFinalizacion;
			ELSIF gmModeActual=E_GEMMA.F3SecuenciaFinalizacion AND IsFinished THEN
				gmModeActual := E_GEMMA.A1ParadaInicial; 
			ELSIF gmModeActual=E_GEMMA.F5VerificacionOrdenada AND NOT pn.cnF5_Funcion THEN
				gmModeActual := gmModePrev; // desde el modo función se vuelve a uno de los grafcets a nivel de estación 
			ELSIF gmModeActual=E_GEMMA.F6Probando AND NOT pn.cnF6_Probar THEN
				gmModeActual := E_GEMMA.A1ParadaInicial; 
				
			// paradas
            ELSIF gmModeActual=E_GEMMA.F1ProduccionNormal AND pn.cnA2_FinCiclo THEN
				gmModeActual := E_GEMMA.A2ParaFinCiclo;
			ELSIF pn.cnA3_Estado THEN				
				gmModeActual := E_GEMMA.A3ParadaEstado; 			
				
			ELSIF pn.cnF4_Planta THEN 				
                gmModeActual := E_GEMMA.F4VerificacionSinOrden;
            ELSE                
                ; // continuar con la preparación/producción/finalización
            END_IF
			
			
			
			
        E_GEMMA.F4VerificacionSinOrden: (* Verificacion sin orden *)
            IF Failure THEN
				gmModeActual := E_GEMMA.D2TratamientoFallos;				
            ELSIF NOT pn.cnF4_Planta THEN 				
				gmModeActual := gmModePrev; // al salir del modo planta volver al modo previo				
            ELSE                
                ; // Seguir en modo manual
            END_IF
			
        	
			
        (* ------------------------------------------------------------ Procedimientos de defecto *)
        E_GEMMA.D1ParadaEmergencia: (* Parada de emergencia *)
            IF NOT pn.cnD1_Emergencia THEN //  TODO CONSIGNA DE EMERGENCIA DEBE TENER ENCUENTA LA POC
                gmModeActual := E_GEMMA.A6Inicializando; // Al quitar la parada de emergencia hay que reinicializar la estación
            ELSE                
                ; // Esperar a que se quite la parada de emergencia
            END_IF
			
        E_GEMMA.D2TratamientoFallos: (* Diagnostico/tratamiento de los fallos *)
            IF NOT Failure THEN
                gmModeActual := E_GEMMA.A5PreparandoTrasFallo;
			ELSIF pn.cnF4_Planta THEN
				gmModeActual := E_GEMMA.F4VerificacionSinOrden;
            ELSE                
                ; // Esperar a que se resuelva el fallo
            END_IF

        E_GEMMA.D3ProducirConFallos: (* Produccion a pesar de los fallos *)
            ; // estado no tratado en la FMS205

    END_CASE
END_IF

(* PARAMETROS DE SALIDA *)
gmFamiArret  := (gmModeActual >= E_GEMMA.A1ParadaInicial) AND (gmModeActual <= E_GEMMA.A7SituandoEstado);
gmFamiFonct  := (gmModeActual >= E_GEMMA.F1ProduccionNormal) AND (gmModeActual <= E_GEMMA.F6Probando);
gmFamiDefail := (gmModeActual >= E_GEMMA.D1ParadaEmergencia) AND (gmModeActual <= E_GEMMA.D3ProducirConFallos);

UpdateUi(pn:=pn);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSpeed" Id="{294b2399-b561-4a6c-95ce-bc201f079bc3}">
      <Declaration><![CDATA[METHOD UpdateSpeed : BOOL

VAR
	factor : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Speed <= 0 THEN
	Speed := 1;
END_IF
factor := 100.0/Speed;

tmMaximoTiempoRespuesta		:= TO_TIME(TO_REAL(dt_MaximoTiempoRespuesta) * factor);
tmTiempoReinicio			:= TO_TIME(TO_REAL(dt_TiempoReinicio) * factor);
tmK_1 						:= TO_TIME(TO_REAL(dt_K_1) * factor);					// Temporizador empujador tapa
tmR_1						:= TO_TIME(TO_REAL(dt_R_1) * factor);					// Temporizador retenedor de la cinta
tmS_1						:= TO_TIME(TO_REAL(dt_S_1) * factor);					// Temporizador separador de la cinta
tmEP						:= TO_TIME(TO_REAL(dt_EP) * factor);					// Tiempo de entrada del pale
tmTP						:= TO_TIME(TO_REAL(dt_TP) * factor);					// Tiempo de transferencia del pale
tmXP						:= TO_TIME(TO_REAL(dt_XP) * factor);					// Tiempo de salida del pale
tmSOL 						:= TO_TIME(TO_REAL(dt_SOL) * factor); 					// tiempo después de soltar y antes de subir
tmV_1						:= TO_TIME(TO_REAL(dt_V_1) * factor);					// tiempo máximo succionando sin que se active el sensor v1
tmL_1						:= TO_TIME(TO_REAL(dt_L_1) * factor);					// tiempo máximo de bajada del medidor de tapas
tmPIN 						:= TO_TIME(TO_REAL(dt_PIN) * factor);					// tiempo para pinzar una tapa antes de subir el brazo
tmE_1						:= TO_TIME(TO_REAL(dt_E_1) * factor);					// tiempo para que el retenedor bloquee el plato
tmD_1 						:= TO_TIME(TO_REAL(dt_D_1) * factor);					// tiempo para girar el plato a la siguiente posición
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateUi" Id="{2f7a7a64-69c4-4b55-9d9b-f8c62855d55d}">
      <Declaration><![CDATA[METHOD UpdateUi : BOOL
VAR_INPUT
	pn				: REFERENCE TO FB_Panel;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Actualiza el reloj y la veloidad cada medio segundo
IF Clock.Q THEN
	Tic := NOT Tic;
	UpdateSpeed();
END_IF
Clock(IN := Tic AND NOT Clock.Q, PT:=T#500MS);

gmModeColor := SEL(gmFamiArret,SEL(gmFamiFonct, gmColorDefail, gmColorFonct), gmColorArret);

// actualizar qué botones de consignas se habilitan (enABLE) 
pn.enF4_Planta		:= FALSE;
pn.enF5_Funcion		:= FALSE;
pn.enA2_FinCiclo 	:= FALSE;
pn.enA3_Estado		:= FALSE;
pn.enF1_Reanduar	:= FALSE;
pn.enF1_Empezar		:= FALSE;

// actualizar actuadores del panel
pn.hwAS_AvisadorSonoro 	:= FALSE;
pn.hwLA_LamparaAlarma	:= FALSE;
pn.hwLM_LamparaMarcha	:= FALSE;
pn.swF1_Empezar			:= FALSE;
pn.swF1_Reanudar		:= FALSE;
pn.swF4_Planta			:= FALSE;
pn.swF5_Funcion			:= FALSE;	


CASE gmModeActual OF
	E_GEMMA.A1ParadaInicial:
		gmModeName				:= 'Mode A1';
		gmModeDescr				:= 'Parada en estado inicial';
		pn.enF4_Planta			:= TRUE;
		pn.enF5_Funcion			:= TRUE;
		pn.enF1_Empezar			:= TRUE;
		pn.hwLM_LamparaMarcha	:= Tic;
		
	E_GEMMA.A2ParaFinCiclo:
		gmModeName				:= 'Mode A2';
		gmModeDescr				:= 'Parada a final de ciclo solicitada';
		pn.enA2_FinCiclo 		:= TRUE;
		pn.enA3_Estado			:= TRUE;
		pn.hwLM_LamparaMarcha	:= TRUE;
		
	E_GEMMA.A3ParadaEstado:
		gmModeName				:= 'Mode A3';
		gmModeDescr				:= 'Parada en estado actual solicitada';
		pn.enF4_Planta			:= TRUE;
		pn.enA3_Estado			:= TRUE;
		
	E_GEMMA.A4ParadaObtenida:
		gmModeName				:= 'Mode A4';
		gmModeDescr				:= 'Parada obtenida';
		pn.enF4_Planta			:= TRUE;
		pn.enF5_Funcion			:= TRUE;
		pn.enA3_Estado			:= TRUE;
		pn.enF1_Reanduar		:= TRUE;
		
	E_GEMMA.A5PreparandoTrasFallo:
		gmModeName				:= 'Mode A5';
		gmModeDescr				:= 'Preparando tras fallo';	
		pn.enF4_Planta			:= TRUE;
		pn.enF5_Funcion			:= TRUE;
		
	E_GEMMA.A6Inicializando:
		gmModeName				:= 'Mode A6';
		gmModeDescr				:= 'Inicializando';
		pn.hwLA_LamparaAlarma	:= Tic;
		
	E_GEMMA.A7SituandoEstado:
		gmModeName				:= 'Mode A7';
		gmModeDescr				:= 'Situando PO en un estado determinado';

	E_GEMMA.F1ProduccionNormal:
		gmModeName				:= 'Mode F1';
		gmModeDescr				:= 'Producción normal';
		pn.enA2_FinCiclo 		:= TRUE;
		pn.enA3_Estado			:= TRUE;
		pn.hwLM_LamparaMarcha	:= TRUE;
		//PN.swF1_Empezar			:= TRUE;

	E_GEMMA.F2SecuenciaPreparacion:
		gmModeName				:= 'Mode F2';
		gmModeDescr				:= 'Secuencia de preparación';	
		pn.enA3_Estado			:= TRUE;
		PN.hwAS_AvisadorSonoro 	:= Tic;
		pn.hwLM_LamparaMarcha	:= TRUE;
		//PN.swF1_Empezar			:= TRUE;
		
	E_GEMMA.F3SecuenciaFinalizacion:
		gmModeName				:= 'Mode F3';
		gmModeDescr				:= 'Secuencia de finalización';
		pn.enA3_Estado			:= TRUE;
		PN.hwAS_AvisadorSonoro 	:= TRUE;
		pn.hwLM_LamparaMarcha	:= TRUE;
		//PN.swF1_Empezar			:= TRUE;
		
	E_GEMMA.F4VerificacionSinOrden:
		gmModeName				:= 'Mode F4';
		gmModeDescr				:= 'Verificación sin orden (Planta)';
		pn.enF4_Planta			:= TRUE;
		pn.enF5_Funcion			:= TRUE;
		//pn.swF4_Planta			:= TRUE;
		
	E_GEMMA.F5VerificacionOrdenada:
		gmModeName				:= 'Mode F5';
		gmModeDescr				:= 'Verificación ordenada (Función)';
		pn.enF4_Planta			:= TRUE;
		pn.enF5_Funcion			:= TRUE;
		pn.enA3_Estado			:= TRUE;
		//pn.swF5_Funcion			:= TRUE;
				
	E_GEMMA.F6Probando:
		gmModeName				:= 'Mode F6';
		gmModeDescr				:= 'Probando';
		pn.enA3_Estado			:= TRUE;
		pn.enF4_Planta			:= TRUE;
		pn.enA3_Estado			:= TRUE;
		
	E_GEMMA.D1ParadaEmergencia:
		gmModeName				:= 'Mode D1';
		gmModeDescr				:= 'Parada de emergencia';
		PN.hwAS_AvisadorSonoro 	:= Tic;
		pn.hwLA_LamparaAlarma	:= Tic;

	E_GEMMA.D2TratamientoFallos:
		gmModeName				:= 'Mode D2';
		gmModeDescr				:= 'Diagnóstico/tratamiento de fallos';
		pn.enF4_Planta			:= TRUE;
		pn.enF5_Funcion			:= TRUE;
		PN.hwAS_AvisadorSonoro 	:= Tic;
		pn.hwLA_LamparaAlarma	:= Tic;
		
	E_GEMMA.D3ProducirConFallos:
		gmModeName				:= 'Mode D3';
		gmModeDescr				:= 'Producir con fallos';
		pn.enF4_Planta			:= TRUE;
		pn.enF5_Funcion			:= TRUE;

END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Director">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Director.ProcessCycle">
      <LineId Id="3" Count="154" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Director.UpdateSpeed">
      <LineId Id="3" Count="18" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Director.UpdateUi">
      <LineId Id="3" Count="137" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>