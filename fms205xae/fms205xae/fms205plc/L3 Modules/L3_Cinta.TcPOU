<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="L3_Cinta" Id="{f4de692b-96c6-493e-9b33-3a90e20acfad}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK L3_Cinta EXTENDS L1_ModuleBase

VAR_INPUT
	Situar			: BOOL;
	Transferir		: BOOL;
END_VAR

VAR_OUTPUT
	fbController			: L2_Cinta_SFC:=(dr:=dr);
	pp						: L1_Sensor;
	cp0						: L1_Sensor;
	cp1						: L1_Sensor;
	cp2						: L1_Sensor;
	RUN						: L1_Actuator;
	REV						: L1_Actuator;
	R_1						: L1_Actuator;
	S_1						: L1_Actuator;
	//Carro_Situado			: BOOL;
	//Carro_Transfer			: BOOL;
	//Position_Carro			: REAL := 0;
	//PosDescaX				: REAL := 0;		// posición X de la tapa descargada (0 bajo el plato)
	//_TapaDescargada			: BOOL;			
	// tipo de tapa descargada
	

	// colores para distingur cuándo situa y cuándo transfiere	
	colPicFramTransferir 	: DWORD;
	colPicFillTransferir 	: DWORD;

	colPicFramSituar 		: DWORD;
	colPicFillSituar 		: DWORD;
	PosTapaY				: REAL; 
END_VAR


VAR CONSTANT
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ProcessCycle" Id="{8ef223d1-a933-4fe3-87e8-40d9ed750433}">
      <Declaration><![CDATA[METHOD ProcessCycle : BOOL 
VAR_INPUT
	dr			: REFERENCE TO L1_Director;
	tapas		: REFERENCE TO L6_Tapas;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF dr.gmModeActual = L1_GEMMA.A6Inicializando THEN
	//Carro_Situado	 			:= FALSE;
	//Carro_Transfer				:= FALSE;
	//Position_Carro				:= MinPosCarro; // empieza a la izquierda de la visu
	//PosTapaY					:= 0; // empieza arriba en el plato
	;
ELSE
	// Sensores y condiciones iniciales
	pp.ProcessCycle (LocalHost:=dr.gmLocalHost, sfcValue=>fbController.pp);
	cp0.ProcessCycle(LocalHost:=dr.gmLocalHost, sfcValue=>fbController.cp0);
	cp1.ProcessCycle(LocalHost:=dr.gmLocalHost, sfcValue=>fbController.cp1);
	cp2.ProcessCycle(LocalHost:=dr.gmLocalHost, sfcValue=>fbController.cp2);
	IC := TRUE;
	
	// Controlador
	fbController.ProcessCycle(dr.gmModeActual);
	fbController(Situar := Situar, Transferir := Transferir,	
		dr:=dr, IC:=IC, Execute:=Execute, Ack:=Ack, Ready=>Ready, Done=>Done);
	
	// Actuadores y actualización de tapas
	IF Ready THEN
		tapas.MoverCinta(Delta:=0, Situar:=Situar);
		//Position_Carro			:= MinPosCarro; // carro a la izquierda
		//PosTapaY				:= 0; // tapa arriba
//	ELSIF Ready AND NOT tapas.estaCarro_Transfer THEN
	//	tapas.MoverCinta(Delta:=0, Situar:=FALSE);
		//Position_Carro			:= 0; // carro bajo el plato
		//PosTapaY				:= SEL(_TapaDescargada, 0, MaxPosTapaY); // tapa arriba o abajo
		//Pos_Situa				:= SEL(Carro_Situado,-MaxPosSitua, 0);
		//Pos_Trans				:= SEL(Carro_Transfer, 0, MaxPosTrans); 
	//ELSIF Ready AND Carro_Transfer THEN
		//;//PosDescaX				:=0;	
		//Position_Carro			:= MaxPosCarro; // carro a la derecha
		//PosTapaY				:= SEL(_TapaDescargada, 0, MaxPosTapaY); // tapa arriba o abajo
	

	ELSIF Done AND NOT fbController.Performed AND Situar THEN
		fbController.Performed 	:= TRUE;
		//Carro_Situado			:= TRUE;
		//Carro_Transfer			:= FALSE;
		tapas.EstaSituada		:= TRUE;
		tapas.EstaTransferida	:= FALSE;
		//_TapaDescargada			:= FALSE;
		tapas.MoverCinta(Delta:=MoverMax, Situar:=TRUE);
		//Position_Carro			:= 0;
		//PosTapaY				:= 0;
	ELSIF Done AND NOT fbController.Performed AND Transferir THEN
		fbController.Performed 	:= TRUE;
		//Carro_Transfer			:= TRUE;
		//Carro_Situado			:= FALSE;
		
		//Position_Carro			:= MaxPosCarro; 
		//PosDescaX				:= MaxPosCarro;
		tapas.EstaTransferida	:= TRUE;
		tapas.EstaDescargada	:= FALSE;
		tapas.EstaSituada		:= FALSE;
		
		tapas.MoverCinta(Delta:=MoverMax, Situar:=FALSE);
	
		//_TapaDescargada			:= FALSE;
		//ELSIF fbController.Executing AND Situar AND Position_Carro <0 THEN
		//Position_Carro 			:= Position_Carro + 2;													
		//ELSIF fbController.Executing AND Transferir AND Position_Carro < MaxPosCarro THEN
		//Position_Carro 			:= Position_Carro + 2;
		//PosDescaX				:= SEL(_TapaDescargada, 0, Position_Carro); // al transferir el carro y la tapa se mueven al unísiono
		//		PosTapaY				:= MaxPosTapaY;
	ELSIF fbController.Executing AND (Situar OR Transferir) THEN
		tapas.MoverCinta(Delta:=0.5, Situar:=Situar);									
	END_IF	
	
	RUN.ProcessCycle(gmMode:=dr.gmModeActual, sfcValue:=fbController.RUN);
	REV.ProcessCycle(gmMode:=dr.gmModeActual, sfcValue:=fbController.REV);
	R_1.ProcessCycle(gmMode:=dr.gmModeActual, sfcValue:=fbController.R_1);
	S_1.ProcessCycle(gmMode:=dr.gmModeActual, sfcValue:=fbController.S_1);

	// Actualizar las flechas de la cinta dependiendo de si sitúa o transfiere
	colPicFramTransferir := SEL(Transferir, colModFramReady, fbController.colPicFram);
	colPicFillTransferir := SEL(Transferir, colModFillReady, fbController.colPicFill);
	colPicFramSituar	 := SEL(Situar, 	colModFramReady, fbController.colPicFram);
	colPicFillSituar	 := SEL(Situar, 	colModFillReady, fbController.colPicFill);
	
END_IF


// tapas.PostCinta(Done := Done, Situa:=Situar, Trans:=Transferir);	]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>