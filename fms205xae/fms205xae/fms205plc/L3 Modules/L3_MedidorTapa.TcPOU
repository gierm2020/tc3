<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="L3_MedidorTapa" Id="{a37cb369-72d3-405d-8544-ddf9b249bb92}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK L3_MedidorTapa EXTENDS L1_ModuleBase
(*

ESTACIÓN MEDICIÓN TAPA - Manual de usuario #32/28

El hecho de disponer de tapas con dos alturas diferentes hace necesario disponer de un elemento 
que realice una medición de las mismas. Debido a la finalidad didáctica con la cual se ha realizado el
diseño de esta célula, se han adoptado soluciones variadas para llevar a cabo operaciones similares. 
En otras estaciones, para operaciones de medición se ha recurrido a componentes como cilindros 
neumáticos con detectores de altura correcta, o palpadores con salida analógica. En este caso se ha 
considerado de interés utilizar un transductor digital que proporciona una salida por pulsos, como es el 
encoder lineal.

La imagen muestra el aspecto del componente utilizado, el cuál consta 
de un cilindro neumático que desplaza el palpador hasta contactar con la 
tapa, en combinación con un encoder lineal integrado en el mismo cilindro. 
Mediante la cuenta de los pulsos suministrados por el encoder, realizada 
mediante una entrada de contaje rápido del PLC, es posible determinar la 
distancia que avanza al cilindro hasta contactar con la tapa. Disponiendo de 
este dato es posible determinar de forma directa la altura de la tapa

*)

VAR_OUTPUT
	fbController		: L2_MedidorTapa_SFC:=(dr:=dr);
	dh 			AT %I*	: UINT; (*Detector valor altura *)
	L_1 				: L1_Actuator;

	Lectura_Registrada	: BOOL;
	Altura_mm			: REAL;
	Altura_Pulsos		: UINT;
	strUi : STRING 		:= '?';
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="ProcessCycle" Id="{d76d2d9a-68fd-4928-b9fd-2c031ae14f83}">
      <Declaration><![CDATA[METHOD ProcessCycle : BOOL 
VAR_INPUT
	dr			: REFERENCE TO L1_Director;
	tapas		: REFERENCE TO L6_Tapas;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Sensores y condiciones iniciales
IC := TRUE;

// Controlador
fbController.ProcessCycle(dr.gmModeActual);
fbController(
    dh := dh, Lectura_Registrada := Lectura_Registrada,
	dr:=dr, IC:=IC, Execute:=Execute, Ack:=Ack, Ready=>Ready, Done=>Done);
	
// Actuadores y actualización de tapas
L_1.ProcessCycle(gmMode:=dr.gmModeActual, sfcValue:=fbController.L_1);
IF fbController.Leyendo AND NOT Lectura_Registrada THEN
	Altura_Pulsos	:= dh;
	Altura_mm		:= -0.0257*dh + 52.532;				 // calcular la altura con la ecuación de regresión
	Altura_mm 		:= SEL(Altura_mm < 0, Altura_mm, 0); // si la altura es negativa dejar cero
	Lectura_Registrada 	:= TRUE;
	strUi := TO_STRING(Altura_mm);
	strUi := concat(strUi, ' mm');
	tapas.B3PostMedid(Altura_Mm:=Altura_mm, Altura_Pulsos:=Altura_Pulsos);

ELSIF Ready THEN // Resetear la lectura para el siguiente ciclo
	Lectura_Registrada 	:= FALSE; 	
	Altura_Pulsos	:= 0;
	Altura_mm		:= 0;
	strUi := '?';
END_IF
	 



]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>